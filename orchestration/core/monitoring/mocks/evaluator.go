// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "orchestration/entities"

	mock "github.com/stretchr/testify/mock"
)

// Evaluator is an autogenerated mock type for the evaluator type
type Evaluator struct {
	mock.Mock
}

// Evaluate provides a mock function with given fields: testCases
func (_m *Evaluator) Evaluate(testCases []entities.Testcase) ([]entities.EvaluatingData, error) {
	ret := _m.Called(testCases)

	var r0 []entities.EvaluatingData
	var r1 error
	if rf, ok := ret.Get(0).(func([]entities.Testcase) ([]entities.EvaluatingData, error)); ok {
		return rf(testCases)
	}
	if rf, ok := ret.Get(0).(func([]entities.Testcase) []entities.EvaluatingData); ok {
		r0 = rf(testCases)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.EvaluatingData)
		}
	}

	if rf, ok := ret.Get(1).(func([]entities.Testcase) error); ok {
		r1 = rf(testCases)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEvaluator interface {
	mock.TestingT
	Cleanup(func())
}

// NewEvaluator creates a new instance of Evaluator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEvaluator(t mockConstructorTestingTNewEvaluator) *Evaluator {
	mock := &Evaluator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
