// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	entities "orchestration/entities"

	mock "github.com/stretchr/testify/mock"
)

// Evaler is an autogenerated mock type for the evaler type
type Evaler struct {
	mock.Mock
}

// Evaluate provides a mock function with given fields: testCases, len
func (_m *Evaler) Evaluate(testCases []entities.Testcase, len uint) ([]entities.EvaluatingData, error) {
	ret := _m.Called(testCases, len)

	var r0 []entities.EvaluatingData
	var r1 error
	if rf, ok := ret.Get(0).(func([]entities.Testcase, uint) ([]entities.EvaluatingData, error)); ok {
		return rf(testCases, len)
	}
	if rf, ok := ret.Get(0).(func([]entities.Testcase, uint) []entities.EvaluatingData); ok {
		r0 = rf(testCases, len)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.EvaluatingData)
		}
	}

	if rf, ok := ret.Get(1).(func([]entities.Testcase, uint) error); ok {
		r1 = rf(testCases, len)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewEvaler interface {
	mock.TestingT
	Cleanup(func())
}

// NewEvaler creates a new instance of Evaler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEvaler(t mockConstructorTestingTNewEvaler) *Evaler {
	mock := &Evaler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
